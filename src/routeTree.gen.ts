/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WarehouseImport } from './routes/warehouse'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as FormFieldImport } from './routes/formField'
import { Route as FormCycleImport } from './routes/formCycle'
import { Route as FieldImport } from './routes/field'
import { Route as DdWarehouseImport } from './routes/ddWarehouse'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as DWarehouseImport } from './routes/dWarehouse'
import { Route as DFieldImport } from './routes/dField'
import { Route as DCycleImport } from './routes/dCycle'
import { Route as CycleImport } from './routes/cycle'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WarehouseRoute = WarehouseImport.update({
  id: '/warehouse',
  path: '/warehouse',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FormFieldRoute = FormFieldImport.update({
  id: '/formField',
  path: '/formField',
  getParentRoute: () => rootRoute,
} as any)

const FormCycleRoute = FormCycleImport.update({
  id: '/formCycle',
  path: '/formCycle',
  getParentRoute: () => rootRoute,
} as any)

const FieldRoute = FieldImport.update({
  id: '/field',
  path: '/field',
  getParentRoute: () => rootRoute,
} as any)

const DdWarehouseRoute = DdWarehouseImport.update({
  id: '/ddWarehouse',
  path: '/ddWarehouse',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const DWarehouseRoute = DWarehouseImport.update({
  id: '/dWarehouse',
  path: '/dWarehouse',
  getParentRoute: () => rootRoute,
} as any)

const DFieldRoute = DFieldImport.update({
  id: '/dField',
  path: '/dField',
  getParentRoute: () => rootRoute,
} as any)

const DCycleRoute = DCycleImport.update({
  id: '/dCycle',
  path: '/dCycle',
  getParentRoute: () => rootRoute,
} as any)

const CycleRoute = CycleImport.update({
  id: '/cycle',
  path: '/cycle',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cycle': {
      id: '/cycle'
      path: '/cycle'
      fullPath: '/cycle'
      preLoaderRoute: typeof CycleImport
      parentRoute: typeof rootRoute
    }
    '/dCycle': {
      id: '/dCycle'
      path: '/dCycle'
      fullPath: '/dCycle'
      preLoaderRoute: typeof DCycleImport
      parentRoute: typeof rootRoute
    }
    '/dField': {
      id: '/dField'
      path: '/dField'
      fullPath: '/dField'
      preLoaderRoute: typeof DFieldImport
      parentRoute: typeof rootRoute
    }
    '/dWarehouse': {
      id: '/dWarehouse'
      path: '/dWarehouse'
      fullPath: '/dWarehouse'
      preLoaderRoute: typeof DWarehouseImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/ddWarehouse': {
      id: '/ddWarehouse'
      path: '/ddWarehouse'
      fullPath: '/ddWarehouse'
      preLoaderRoute: typeof DdWarehouseImport
      parentRoute: typeof rootRoute
    }
    '/field': {
      id: '/field'
      path: '/field'
      fullPath: '/field'
      preLoaderRoute: typeof FieldImport
      parentRoute: typeof rootRoute
    }
    '/formCycle': {
      id: '/formCycle'
      path: '/formCycle'
      fullPath: '/formCycle'
      preLoaderRoute: typeof FormCycleImport
      parentRoute: typeof rootRoute
    }
    '/formField': {
      id: '/formField'
      path: '/formField'
      fullPath: '/formField'
      preLoaderRoute: typeof FormFieldImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/warehouse': {
      id: '/warehouse'
      path: '/warehouse'
      fullPath: '/warehouse'
      preLoaderRoute: typeof WarehouseImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cycle': typeof CycleRoute
  '/dCycle': typeof DCycleRoute
  '/dField': typeof DFieldRoute
  '/dWarehouse': typeof DWarehouseRoute
  '/dashboard': typeof DashboardRoute
  '/ddWarehouse': typeof DdWarehouseRoute
  '/field': typeof FieldRoute
  '/formCycle': typeof FormCycleRoute
  '/formField': typeof FormFieldRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/warehouse': typeof WarehouseRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cycle': typeof CycleRoute
  '/dCycle': typeof DCycleRoute
  '/dField': typeof DFieldRoute
  '/dWarehouse': typeof DWarehouseRoute
  '/dashboard': typeof DashboardRoute
  '/ddWarehouse': typeof DdWarehouseRoute
  '/field': typeof FieldRoute
  '/formCycle': typeof FormCycleRoute
  '/formField': typeof FormFieldRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/warehouse': typeof WarehouseRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cycle': typeof CycleRoute
  '/dCycle': typeof DCycleRoute
  '/dField': typeof DFieldRoute
  '/dWarehouse': typeof DWarehouseRoute
  '/dashboard': typeof DashboardRoute
  '/ddWarehouse': typeof DdWarehouseRoute
  '/field': typeof FieldRoute
  '/formCycle': typeof FormCycleRoute
  '/formField': typeof FormFieldRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/warehouse': typeof WarehouseRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cycle'
    | '/dCycle'
    | '/dField'
    | '/dWarehouse'
    | '/dashboard'
    | '/ddWarehouse'
    | '/field'
    | '/formCycle'
    | '/formField'
    | '/login'
    | '/register'
    | '/warehouse'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cycle'
    | '/dCycle'
    | '/dField'
    | '/dWarehouse'
    | '/dashboard'
    | '/ddWarehouse'
    | '/field'
    | '/formCycle'
    | '/formField'
    | '/login'
    | '/register'
    | '/warehouse'
  id:
    | '__root__'
    | '/'
    | '/cycle'
    | '/dCycle'
    | '/dField'
    | '/dWarehouse'
    | '/dashboard'
    | '/ddWarehouse'
    | '/field'
    | '/formCycle'
    | '/formField'
    | '/login'
    | '/register'
    | '/warehouse'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CycleRoute: typeof CycleRoute
  DCycleRoute: typeof DCycleRoute
  DFieldRoute: typeof DFieldRoute
  DWarehouseRoute: typeof DWarehouseRoute
  DashboardRoute: typeof DashboardRoute
  DdWarehouseRoute: typeof DdWarehouseRoute
  FieldRoute: typeof FieldRoute
  FormCycleRoute: typeof FormCycleRoute
  FormFieldRoute: typeof FormFieldRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  WarehouseRoute: typeof WarehouseRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CycleRoute: CycleRoute,
  DCycleRoute: DCycleRoute,
  DFieldRoute: DFieldRoute,
  DWarehouseRoute: DWarehouseRoute,
  DashboardRoute: DashboardRoute,
  DdWarehouseRoute: DdWarehouseRoute,
  FieldRoute: FieldRoute,
  FormCycleRoute: FormCycleRoute,
  FormFieldRoute: FormFieldRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  WarehouseRoute: WarehouseRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cycle",
        "/dCycle",
        "/dField",
        "/dWarehouse",
        "/dashboard",
        "/ddWarehouse",
        "/field",
        "/formCycle",
        "/formField",
        "/login",
        "/register",
        "/warehouse"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cycle": {
      "filePath": "cycle.tsx"
    },
    "/dCycle": {
      "filePath": "dCycle.tsx"
    },
    "/dField": {
      "filePath": "dField.tsx"
    },
    "/dWarehouse": {
      "filePath": "dWarehouse.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/ddWarehouse": {
      "filePath": "ddWarehouse.tsx"
    },
    "/field": {
      "filePath": "field.tsx"
    },
    "/formCycle": {
      "filePath": "formCycle.tsx"
    },
    "/formField": {
      "filePath": "formField.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/warehouse": {
      "filePath": "warehouse.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
