/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WarehouseRouteImport } from './routes/warehouse'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as FormFieldRouteImport } from './routes/formField'
import { Route as FormCycleRouteImport } from './routes/formCycle'
import { Route as FieldRouteImport } from './routes/field'
import { Route as DdWarehouseRouteImport } from './routes/ddWarehouse'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as DWarehouseRouteImport } from './routes/dWarehouse'
import { Route as CycleRouteImport } from './routes/cycle'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FormFieldEditIdRouteImport } from './routes/formFieldEdit.$id'
import { Route as FormCycleEditIdRouteImport } from './routes/formCycleEdit.$id'
import { Route as DFieldIdRouteImport } from './routes/dField.$id'
import { Route as DCycleIdRouteImport } from './routes/dCycle.$id'

const WarehouseRoute = WarehouseRouteImport.update({
  id: '/warehouse',
  path: '/warehouse',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const FormFieldRoute = FormFieldRouteImport.update({
  id: '/formField',
  path: '/formField',
  getParentRoute: () => rootRouteImport,
} as any)
const FormCycleRoute = FormCycleRouteImport.update({
  id: '/formCycle',
  path: '/formCycle',
  getParentRoute: () => rootRouteImport,
} as any)
const FieldRoute = FieldRouteImport.update({
  id: '/field',
  path: '/field',
  getParentRoute: () => rootRouteImport,
} as any)
const DdWarehouseRoute = DdWarehouseRouteImport.update({
  id: '/ddWarehouse',
  path: '/ddWarehouse',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DWarehouseRoute = DWarehouseRouteImport.update({
  id: '/dWarehouse',
  path: '/dWarehouse',
  getParentRoute: () => rootRouteImport,
} as any)
const CycleRoute = CycleRouteImport.update({
  id: '/cycle',
  path: '/cycle',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FormFieldEditIdRoute = FormFieldEditIdRouteImport.update({
  id: '/formFieldEdit/$id',
  path: '/formFieldEdit/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FormCycleEditIdRoute = FormCycleEditIdRouteImport.update({
  id: '/formCycleEdit/$id',
  path: '/formCycleEdit/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DFieldIdRoute = DFieldIdRouteImport.update({
  id: '/dField/$id',
  path: '/dField/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const DCycleIdRoute = DCycleIdRouteImport.update({
  id: '/dCycle/$id',
  path: '/dCycle/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cycle': typeof CycleRoute
  '/dWarehouse': typeof DWarehouseRoute
  '/dashboard': typeof DashboardRoute
  '/ddWarehouse': typeof DdWarehouseRoute
  '/field': typeof FieldRoute
  '/formCycle': typeof FormCycleRoute
  '/formField': typeof FormFieldRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/warehouse': typeof WarehouseRoute
  '/dCycle/$id': typeof DCycleIdRoute
  '/dField/$id': typeof DFieldIdRoute
  '/formCycleEdit/$id': typeof FormCycleEditIdRoute
  '/formFieldEdit/$id': typeof FormFieldEditIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cycle': typeof CycleRoute
  '/dWarehouse': typeof DWarehouseRoute
  '/dashboard': typeof DashboardRoute
  '/ddWarehouse': typeof DdWarehouseRoute
  '/field': typeof FieldRoute
  '/formCycle': typeof FormCycleRoute
  '/formField': typeof FormFieldRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/warehouse': typeof WarehouseRoute
  '/dCycle/$id': typeof DCycleIdRoute
  '/dField/$id': typeof DFieldIdRoute
  '/formCycleEdit/$id': typeof FormCycleEditIdRoute
  '/formFieldEdit/$id': typeof FormFieldEditIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cycle': typeof CycleRoute
  '/dWarehouse': typeof DWarehouseRoute
  '/dashboard': typeof DashboardRoute
  '/ddWarehouse': typeof DdWarehouseRoute
  '/field': typeof FieldRoute
  '/formCycle': typeof FormCycleRoute
  '/formField': typeof FormFieldRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/warehouse': typeof WarehouseRoute
  '/dCycle/$id': typeof DCycleIdRoute
  '/dField/$id': typeof DFieldIdRoute
  '/formCycleEdit/$id': typeof FormCycleEditIdRoute
  '/formFieldEdit/$id': typeof FormFieldEditIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cycle'
    | '/dWarehouse'
    | '/dashboard'
    | '/ddWarehouse'
    | '/field'
    | '/formCycle'
    | '/formField'
    | '/login'
    | '/profile'
    | '/register'
    | '/warehouse'
    | '/dCycle/$id'
    | '/dField/$id'
    | '/formCycleEdit/$id'
    | '/formFieldEdit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cycle'
    | '/dWarehouse'
    | '/dashboard'
    | '/ddWarehouse'
    | '/field'
    | '/formCycle'
    | '/formField'
    | '/login'
    | '/profile'
    | '/register'
    | '/warehouse'
    | '/dCycle/$id'
    | '/dField/$id'
    | '/formCycleEdit/$id'
    | '/formFieldEdit/$id'
  id:
    | '__root__'
    | '/'
    | '/cycle'
    | '/dWarehouse'
    | '/dashboard'
    | '/ddWarehouse'
    | '/field'
    | '/formCycle'
    | '/formField'
    | '/login'
    | '/profile'
    | '/register'
    | '/warehouse'
    | '/dCycle/$id'
    | '/dField/$id'
    | '/formCycleEdit/$id'
    | '/formFieldEdit/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CycleRoute: typeof CycleRoute
  DWarehouseRoute: typeof DWarehouseRoute
  DashboardRoute: typeof DashboardRoute
  DdWarehouseRoute: typeof DdWarehouseRoute
  FieldRoute: typeof FieldRoute
  FormCycleRoute: typeof FormCycleRoute
  FormFieldRoute: typeof FormFieldRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  WarehouseRoute: typeof WarehouseRoute
  DCycleIdRoute: typeof DCycleIdRoute
  DFieldIdRoute: typeof DFieldIdRoute
  FormCycleEditIdRoute: typeof FormCycleEditIdRoute
  FormFieldEditIdRoute: typeof FormFieldEditIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/warehouse': {
      id: '/warehouse'
      path: '/warehouse'
      fullPath: '/warehouse'
      preLoaderRoute: typeof WarehouseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/formField': {
      id: '/formField'
      path: '/formField'
      fullPath: '/formField'
      preLoaderRoute: typeof FormFieldRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/formCycle': {
      id: '/formCycle'
      path: '/formCycle'
      fullPath: '/formCycle'
      preLoaderRoute: typeof FormCycleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/field': {
      id: '/field'
      path: '/field'
      fullPath: '/field'
      preLoaderRoute: typeof FieldRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ddWarehouse': {
      id: '/ddWarehouse'
      path: '/ddWarehouse'
      fullPath: '/ddWarehouse'
      preLoaderRoute: typeof DdWarehouseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dWarehouse': {
      id: '/dWarehouse'
      path: '/dWarehouse'
      fullPath: '/dWarehouse'
      preLoaderRoute: typeof DWarehouseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cycle': {
      id: '/cycle'
      path: '/cycle'
      fullPath: '/cycle'
      preLoaderRoute: typeof CycleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/formFieldEdit/$id': {
      id: '/formFieldEdit/$id'
      path: '/formFieldEdit/$id'
      fullPath: '/formFieldEdit/$id'
      preLoaderRoute: typeof FormFieldEditIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/formCycleEdit/$id': {
      id: '/formCycleEdit/$id'
      path: '/formCycleEdit/$id'
      fullPath: '/formCycleEdit/$id'
      preLoaderRoute: typeof FormCycleEditIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dField/$id': {
      id: '/dField/$id'
      path: '/dField/$id'
      fullPath: '/dField/$id'
      preLoaderRoute: typeof DFieldIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dCycle/$id': {
      id: '/dCycle/$id'
      path: '/dCycle/$id'
      fullPath: '/dCycle/$id'
      preLoaderRoute: typeof DCycleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CycleRoute: CycleRoute,
  DWarehouseRoute: DWarehouseRoute,
  DashboardRoute: DashboardRoute,
  DdWarehouseRoute: DdWarehouseRoute,
  FieldRoute: FieldRoute,
  FormCycleRoute: FormCycleRoute,
  FormFieldRoute: FormFieldRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  WarehouseRoute: WarehouseRoute,
  DCycleIdRoute: DCycleIdRoute,
  DFieldIdRoute: DFieldIdRoute,
  FormCycleEditIdRoute: FormCycleEditIdRoute,
  FormFieldEditIdRoute: FormFieldEditIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
